abstract class Element {
	def contents:Array[String]
	
	def height:Int = contents.length
	
	def width:Int = if (height==0) 0 else contents(0).length
}


class ArrayElement(conts:Array[String]) extends Element {
	def contents:Array[String] = conts
} 


//参数化字段
class ArrayElement2(
	val contents:Array[String]	//重载并实现了contents抽象方法为字段
) extends Element {
	
}


class LineElement(s:String) extends ArrayElement(Array(s)) {
  override def height:Int = 1
  override def width:Int = s.length
}


class UniformElement(
	ch:String,
	
)

object HelloClass {
  
  def main(args:Array[String]):Unit = {
    val elem:Element = new ArrayElement(Array("1","2","3"))
    println(elem.contents,elem.height,elem.width)
    
    val elem2:Element = new ArrayElement2(Array("1","2","3"))
    println(elem2.contents,elem2.height,elem2.width)
  }
  
}